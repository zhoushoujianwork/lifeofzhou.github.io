(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{480:function(e,t,n){"use strict";n.r(t);var g=n(9),i=Object(g.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"python"}},[e._v("Python")]),e._v(" "),n("h2",{attrs:{id:"get-file"}},[e._v("get_file")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("def get_file(root_path, all_files={}):\n    '''\n    递归函数，遍历该文档目录和子目录下的所有文件，获取其path\n    '''\n    pwd = sys.path[0]\n    root_path = pwd+'/'+root_path\n    files = os.listdir(root_path)\n    for file in files:\n        if not os.path.isdir(root_path + '/' + file):   # not a dir\n            all_files[file] = root_path + '/' + file\n        else:  # is a dir\n            get_file((root_path+'/'+file), all_files)\n    return all_files\n\nif __name__ == \"__main__\":\n    FileList = get_file('taskdir')\n    for v,k in FileList.items():\n                print('filename:{v} pwd:{k}'.format(v = v, k = k))\n                # print('filename:%s pwd:%s' %(v,k))\n")])])]),n("h2",{attrs:{id:"子进程运行"}},[e._v("子进程运行")]),e._v(" "),n("h2",{attrs:{id:"python自动拉取gitlab项目备份"}},[e._v("python自动拉取gitlab项目备份")]),e._v(" "),n("ul",[n("li",[e._v("环境：python2.7")]),e._v(" "),n("li",[e._v("依赖：python-gitlab (注意不是gitlab)")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('#!/usr/bin/env python\n# coding=utf-8\nimport gitlab,commands,time\nurl="http://47.114.91.163/"\ntoken="v5m_jPhh6djoa_wLZzqF"\ngl = gitlab.Gitlab(url,token)\nprojects = gl.projects.list(page=2,per_page=20)\nList=[]\nTime=time.strftime("%Y-%m-%d", time.localtime())\nBackDir=\'/home/zhou/ctd/Git/%s\' % (Time)\n(k,v)=commands.getstatusoutput("mkdir -p %s" % (BackDir))\nDeleteday3="find %s -type f -ctime +3 | xargs rm -rf" % (BackDir)\n(k,v)=commands.getstatusoutput(Deleteday3)\nfor p in projects:\n    List.append(p.http_url_to_repo)\n    # print List\nfor i in List:\n    i=i.replace(\'172.19.0.39/\',\'47.114.91.163/\')\n    i=i.replace(\'git@\',\'http://root:12345678@\')\n    # print i\n    comm="cd %s && git clone  %s" % (BackDir,i)\n    (k,v)=commands.getstatusoutput(comm)\n    print k,v\n\n')])])]),n("h2",{attrs:{id:"logging-模块"}},[e._v("logging 模块")]),e._v(" "),n("h3",{attrs:{id:"日志模式"}},[e._v("日志模式")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("字符")]),e._v(" "),n("th",[e._v("含义")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("'r'")]),e._v(" "),n("td",[e._v("读取（默认）")])]),e._v(" "),n("tr",[n("td",[e._v("'w'")]),e._v(" "),n("td",[e._v("写入，并先截断文件")])]),e._v(" "),n("tr",[n("td",[e._v("'x'")]),e._v(" "),n("td",[e._v("排它性创建，如果文件已存在则失败")])]),e._v(" "),n("tr",[n("td",[e._v("'a'")]),e._v(" "),n("td",[e._v("写入，如果文件存在则在末尾追加")])]),e._v(" "),n("tr",[n("td",[e._v("'b'")]),e._v(" "),n("td",[e._v("二进制模式")])]),e._v(" "),n("tr",[n("td",[e._v("'t'")]),e._v(" "),n("td",[e._v("文本模式（默认）")])]),e._v(" "),n("tr",[n("td",[e._v("'+'")]),e._v(" "),n("td",[e._v("更新磁盘文件（读取并写入）")])])])]),e._v(" "),n("h3",{attrs:{id:"_1、日志级别"}},[e._v("1、日志级别")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import logging  # 引入logging模块\n# 将信息打印到控制台上\nlogging.debug(u"苍井空")\nlogging.info(u"麻生希")\nlogging.warning(u"小泽玛利亚")\nlogging.error(u"桃谷绘里香")\nlogging.critical(u"泷泽萝拉")\n')])])]),n("p",[e._v("上面可以看到只有后面三个能打印出来")]),e._v(" "),n("p",[e._v("默认生成的root logger的level是logging.WARNING,低于该级别的就不输出了")]),e._v(" "),n("p",[e._v("级别排序:"),n("code",[e._v("CRITICAL")]),e._v(" > "),n("code",[e._v("ERROR")]),e._v(" > "),n("code",[e._v("WARNING")]),e._v(" > "),n("code",[e._v("INFO")]),e._v(" > "),n("code",[e._v("DEBUG")])]),e._v(" "),n("ul",[n("li",[n("p",[e._v("debug : 打印全部的日志,详细的信息,通常只出现在诊断问题上")])]),e._v(" "),n("li",[n("p",[e._v("info : 打印info,warning,error,critical级别的日志,确认一切按预期运行")])]),e._v(" "),n("li",[n("p",[e._v("warning : 打印warning,error,critical级别的日志,一个迹象表明,一些意想不到的事情发生了,或表明一些问题在不久的将来(例如。磁盘空间低”),这个软件还能按预期工作")])]),e._v(" "),n("li",[n("p",[e._v("error : 打印error,critical级别的日志,更严重的问题,软件没能执行一些功能")])]),e._v(" "),n("li",[n("p",[e._v("critical : 打印critical级别,一个严重的错误,这表明程序本身可能无法继续运行")])])]),e._v(" "),n("p",[e._v("这时候，如果需要显示低于WARNING级别的内容，可以引入NOTSET级别来显示：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import logging  # 引入logging模块\nlogging.basicConfig(level=logging.NOTSET)  # 设置日志级别\nlogging.debug(u"如果设置了日志级别为NOTSET,那么这里可以采取debug、info的级别的内容也可以显示在控制台上了")\n')])])]),n("h3",{attrs:{id:"_2、部分名词解释"}},[e._v("2、部分名词解释")]),e._v(" "),n("p",[e._v("Logging.Formatter：这个类配置了日志的格式，在里面自定义设置日期和时间，输出日志的时候将会按照设置的格式显示内容。\nLogging.Logger：Logger是Logging模块的主体，进行以下三项工作：")]),e._v(" "),n("ol",[n("li",[e._v("为程序提供记录日志的接口")]),e._v(" "),n("li",[e._v("判断日志所处级别，并判断是否要过滤")]),e._v(" "),n("li",[e._v("根据其日志级别将该条日志分发给不同handler")])]),e._v(" "),n("h4",{attrs:{id:"常用函数有"}},[e._v("常用函数有：")]),e._v(" "),n("ul",[n("li",[e._v("Logger.setLevel() 设置日志级别")]),e._v(" "),n("li",[e._v("Logger.addHandler() 和 Logger.removeHandler() 添加和删除一个Handler")]),e._v(" "),n("li",[e._v("Logger.addFilter() 添加一个Filter,过滤作用")]),e._v(" "),n("li",[e._v("Logging.Handler：Handler基于日志级别对日志进行分发，如设置为WARNING级别的Handler只会处理WARNING及以上级别的日志。")]),e._v(" "),n("li",[e._v("setLevel() 设置级别")]),e._v(" "),n("li",[e._v("setFormatter() 设置Formatter")])]),e._v(" "),n("h3",{attrs:{id:"_3、日志输出-控制台"}},[e._v("3、日志输出-控制台")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import logging  # 引入logging模块\nlogging.basicConfig(level=logging.DEBUG,\n                    format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s')  # logging.basicConfig函数对日志的输出格式及方式做相关配置\n# 由于日志基本配置中级别设置为DEBUG，所以一下打印信息将会全部显示在控制台上\nlogging.info('this is a loggging info message')\nlogging.debug('this is a loggging debug message')\nlogging.warning('this is loggging a warning message')\nlogging.error('this is an loggging error message')\nlogging.critical('this is a loggging critical message')\n")])])]),n("p",[e._v("上面代码通过"),n("code",[e._v("logging.basicConfig")]),e._v("函数进行配置了日志级别和日志内容输出格式；因为级别为"),n("code",[e._v("DEBUG")]),e._v("，所以会将"),n("code",[e._v("DEBUG")]),e._v("级别以上的信息都输出显示再控制台上。")]),e._v(" "),n("h3",{attrs:{id:"_4、日志输出-文件"}},[e._v("4、日志输出-文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import logging  # 引入logging模块\nimport os.path\nimport time\n# 第一步，创建一个logger\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)  # Log等级总开关\n# 第二步，创建一个handler，用于写入日志文件\nrq = time.strftime('%Y%m%d%H%M', time.localtime(time.time()))\nlog_path = os.path.dirname(os.getcwd()) + '/Logs/'\nlog_name = log_path + rq + '.log'\nlogfile = log_name\nfh = logging.FileHandler(logfile, mode='w')\nfh.setLevel(logging.DEBUG)  # 输出到file的log等级的开关\n# 第三步，定义handler的输出格式\nformatter = logging.Formatter(\"%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s\")\nfh.setFormatter(formatter)\n# 第四步，将logger添加到handler里面\nlogger.addHandler(fh)\n# 日志\nlogger.debug('this is a logger debug message')\nlogger.info('this is a logger info message')\nlogger.warning('this is a logger warning message')\nlogger.error('this is a logger error message')\nlogger.critical('this is a logger critical message')\n")])])]),n("h3",{attrs:{id:"_5、日志输出-控制台和文件"}},[e._v("5、日志输出-控制台和文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("只要在输入到日志中的第二步和第三步插入一个handler输出到控制台：\n创建一个handler，用于输出到控制台\nch = logging.StreamHandler()\nch.setLevel(logging.WARNING)  # 输出到console的log等级的开关\n第四步和第五步分别加入以下代码即可\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n")])])]),n("h3",{attrs:{id:"_6、format常用格式说明"}},[e._v("6、format常用格式说明")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" - %(levelno)s:     打印日志级别的数值\n - %(levelname)s:   打印日志级别名称\n - %(pathname)s:    打印当前执行程序的路径，其实就是sys.argv[0]\n - %(filename)s:    打印当前执行程序名\n - %(funcName)s:    打印日志的当前函数\n - %(lineno)d:      打印日志的当前行号\n - %(asctime)s:     打印日志的时间\n - %(thread)d:      打印线程ID\n - %(threadName)s:  打印线程名称\n - %(process)d:     打印进程ID\n - %(message)s:     打印日志信息\n")])])]),n("h3",{attrs:{id:"_7、捕捉异常-用traceback记录"}},[e._v("7、捕捉异常,用traceback记录")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import os.path\nimport time\nimport logging\n# 创建一个logger\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)  # Log等级总开关\n\n# 创建一个handler，用于写入日志文件\nrq = time.strftime('%Y%m%d%H%M', time.localtime(time.time()))\nlog_path = os.path.dirname(os.getcwd()) + '/Logs/'\nlog_name = log_path + rq + '.log'\nlogfile = log_name\nfh = logging.FileHandler(logfile, mode='w')\nfh.setLevel(logging.DEBUG)  # 输出到file的log等级的开关\n\n# 定义handler的输出格式\nformatter = logging.Formatter(\"%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s\")\nfh.setFormatter(formatter)\nlogger.addHandler(fh)\n# 使用logger.XX来记录错误,这里的\"error\"可以根据所需要的级别进行修改\ntry:\n    open('/path/to/does/not/exist', 'rb')\nexcept (SystemExit, KeyboardInterrupt):\n    raise\nexcept Exception, e:\n    logger.error('Failed to open file', exc_info=True)\n")])])]),n("h3",{attrs:{id:"_8、多模块调用logging-日志输出顺序"}},[e._v("8、多模块调用logging,日志输出顺序")]),e._v(" "),n("p",[n("code",[e._v("warning_output.py")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import logging\ndef write_warning():\n    logging.warning(u"记录文件warning_output.py的日志")\nerror_output.py\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import logging\ndef write_error():\n    logging.error(u"记录文件error_output.py的日志")\n\n')])])]),n("p",[n("code",[e._v("main.py")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\nimport logging\nimport warning_output\nimport error_output\n\ndef write_critical():\n    logging.critical(u"记录文件main.py的日志")\n\nwarning_output.write_warning()  # 调用warning_output文件中write_warning方法\nwrite_critical()\nerror_output.write_error()  # 调用error_output文件中write_error方法\n')])])]),n("h3",{attrs:{id:"_9、日志滚动和过期删除-按时间"}},[e._v("9、日志滚动和过期删除(按时间）")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('# coding:utf-8\nimport logging\nimport time\nimport re\nfrom logging.handlers import TimedRotatingFileHandler\nfrom logging.handlers import RotatingFileHandler\n\n\ndef backroll():\n    #日志打印格式\n    log_fmt = \'%(asctime)s\\tFile \\"%(filename)s\\",line %(lineno)s\\t%(levelname)s: %(message)s\'\n    formatter = logging.Formatter(log_fmt)\n    #创建TimedRotatingFileHandler对象\n    log_file_handler = TimedRotatingFileHandler(filename="ds_update", when="M", interval=2, backupCount=2)\n    #log_file_handler.suffix = "%Y-%m-%d_%H-%M.log"\n    #log_file_handler.extMatch = re.compile(r"^\\d{4}-\\d{2}-\\d{2}_\\d{2}-\\d{2}.log$")\n    log_file_handler.setFormatter(formatter)\n    logging.basicConfig(level=logging.INFO)\n    log = logging.getLogger()\n    log.addHandler(log_file_handler)\n    #循环打印日志\n    log_content = "test log"\n    count = 0\n    while count < 30:\n        log.error(log_content)\n        time.sleep(20)\n        count = count + 1\n    log.removeHandler(log_file_handler)\n\n\nif __name__ == "__main__":\n    backroll()\n')])])]),n("p",[e._v("filename：日志文件名的prefix；")]),e._v(" "),n("p",[e._v("when：是一个字符串，用于描述滚动周期的基本单位，字符串的值及意义如下：")]),e._v(" "),n("ul",[n("li",[e._v("“S”: Seconds")]),e._v(" "),n("li",[e._v("“M”: Minutes")]),e._v(" "),n("li",[e._v("“H”: Hours")]),e._v(" "),n("li",[e._v("“D”: Days")]),e._v(" "),n("li",[e._v("“W”: Week day (0=Monday)")]),e._v(" "),n("li",[e._v("“midnight”: Roll over at midnight")])]),e._v(" "),n("p",[e._v("interval: 滚动周期，单位有when指定，比如：when=’D’,interval=1，表示每天产生一个日志文件")]),e._v(" "),n("p",[e._v("backupCount: 表示日志文件的保留个数")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("本文摘录：\nhttps://blog.csdn.net/ACK_ACK/article/details/87884607")]),e._v(" "),n("h2",{attrs:{id:"python-捕捉ctrl-c异常方法"}},[e._v("python 捕捉ctrl+c异常方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import sys\n\ntry:\n    # 运行\nexcept KeyboardInterrupt:\n    # 结束\n    sys.exit()\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);