(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{469:function(e,s,a){"use strict";a.r(s);var t=a(9),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"一-安装"}},[e._v("一. 安装")]),e._v(" "),a("h3",{attrs:{id:"_1-1-安装python组建"}},[e._v("1.1 安装python组建")]),e._v(" "),a("p",[e._v("使用清华源安装组建"),a("code",[e._v("clerey")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U\npip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\npip3 install redis celery\n")])])]),a("h3",{attrs:{id:"_1-2-选用消息中间件rabbitmq"}},[e._v("1.2 选用消息中间件rabbitmq")]),e._v(" "),a("p",[e._v("目前支持的中间件有"),a("code",[e._v("RabbitMQ")]),e._v(" "),a("code",[e._v("Redis")]),e._v("\nRabbitMQ 是默认的中间人（Broker），只需要配置连接的URL即可，不需要安装额外的的配置以及初始化配置信息")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("broker_url = 'amqp://myuser:mypassword@localhost:5672/myvhost'\n")])])]),a("h4",{attrs:{id:"_1-2-1-使用docker方式安装"}},[e._v("1.2.1 使用docker方式安装")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker run -d -p 5462:5462 -p 5672:5672 rabbitmq\n")])])]),a("h4",{attrs:{id:"_1-2-2-配置-rabbitmq"}},[e._v("1.2.2 配置 RabbitMQ")]),e._v(" "),a("p",[e._v("要使用 Celery，需要创一个RabbitMQ账户：\n进入容器：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker exec -it charming_leakey bash\n")])])]),a("p",[e._v("执行以下命令：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('rabbitmqctl add_user celery celery123\nrabbitmqctl add_vhost localhost\nrabbitmqctl set_user_tags celery mytag\nrabbitmqctl set_permissions -p localhost celery ".*" ".*" ".*"\n')])])]),a("p",[e._v("rabbitmq 启动与停止")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("rabbitmqctl-server\n# 也可以通过添加 -detached 参数在后台运行：\nrabbitmqctl-server -detached\n# 永远不要通过 kill 命令来进行停止 RabbitMQ 运行，使用 rabbitmqctl 命令来进行停止 RabbitMQ ：\nrabbitmqctl stop\n")])])]),a("h3",{attrs:{id:"_1-3-使用redis作为后端存储"}},[e._v("1.3 使用redis作为后端存储")]),e._v(" "),a("h4",{attrs:{id:"_1-3-1-使用docker方式安装"}},[e._v("1.3.1 使用docker方式安装")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker run -dit -p 6379:6379 --name redis redis\n")])])]),a("h2",{attrs:{id:"二-代码"}},[e._v("二.代码")]),e._v(" "),a("h3",{attrs:{id:"_2-1-消息消费者"}},[e._v("2.1 消息消费者")]),e._v(" "),a("p",[e._v("tasks.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import time\nfrom celery import Celery\nbackend = \'redis://localhost/0\'\nbroker = \'amqp://celery:celery123@localhost//\'\n\napp = Celery(\'tasks\', broker=broker, backend=backend)\n\n@app.task\ndef sendmail(name):\n    print("start send email to %s" %(name))\n    time.sleep(1)\n    MSG = "邮件发送成功！"\n    print(MSG)\n    return MSG\n\n@app.task\ndef sendmsg(name):\n    print("start send msg to %s" %(name))\n    time.sleep(5)\n    MSG = "短信发送完成！"\n    print(MSG)\n    return MSG\n\nif __name__ == "__main__":\n    pass\n')])])]),a("p",[e._v("运行消费者的后台程序")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ celery worker -A tasks --loglevel=info\n \n -------------- celery@zhou-PC v4.4.7 (cliffs)\n--- ***** ----- \n-- ******* ---- Linux-5.3.0-3-amd64-x86_64-with-Deepin-20-apricot 2020-08-28 17:49:12\n- *** --- * --- \n- ** ---------- [config]\n- ** ---------- .> app:         tasks:0x7efdc3d4ea20\n- ** ---------- .> transport:   amqp://celery:**@localhost:5672//\n- ** ---------- .> results:     disabled://\n- *** --- * --- .> concurrency: 4 (prefork)\n-- ******* ---- .> task events: OFF (enable -E to monitor tasks in this worker)\n--- ***** ----- \n -------------- [queues]\n                .> celery           exchange=celery(direct) key=celery\n                \n\n[tasks]\n  . tasks.sendmail\n  . tasks.sendmsg\n\n[2020-08-28 17:49:12,189: INFO/MainProcess] Connected to amqp://celery:**@127.0.0.1:5672//\n[2020-08-28 17:49:12,197: INFO/MainProcess] mingle: searching for neighbors\n[2020-08-28 17:49:13,315: INFO/MainProcess] mingle: all alone\n[2020-08-28 17:49:13,333: INFO/MainProcess] celery@zhou-PC ready.\n[2020-08-28 17:49:14,997: INFO/MainProcess] Received task: tasks.sendmail[0df3bf3d-48d9-4d0f-a48b-5d42efa1756f]  \n[2020-08-28 17:49:14,998: WARNING/ForkPoolWorker-3] start send email to 111\n[2020-08-28 17:49:14,998: INFO/MainProcess] Received task: tasks.sendmsg[68e3f2cf-54a3-49e0-b11a-ffe1ecbf66d1]  \n[2020-08-28 17:49:15,001: WARNING/ForkPoolWorker-2] start send msg to 2222\n[2020-08-28 17:49:16,005: WARNING/ForkPoolWorker-3] finished\n[2020-08-28 17:49:16,005: INFO/ForkPoolWorker-3] Task tasks.sendmail[0df3bf3d-48d9-4d0f-a48b-5d42efa1756f] succeeded in 1.0072376700118184s: 'ok'\n[2020-08-28 17:49:20,007: WARNING/ForkPoolWorker-2] finished22222222\n[2020-08-28 17:49:20,007: INFO/ForkPoolWorker-2] Task tasks.sendmsg[68e3f2cf-54a3-49e0-b11a-ffe1ecbf66d1] succeeded in 5.007500298030209s: 'ok'\n")])])]),a("h3",{attrs:{id:"_2-2-消息生产者"}},[e._v("2.2 消息生产者")]),e._v(" "),a("p",[e._v("produce.py\n消息生产者会有唯一的ID值，可以通过该ID去后端存储结果中查询异步执行的结果。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('from tasks import sendmail,sendmsg\n\nsendmail.delay("短信验证码是 123456 请勿告诉其他人。" )\nsendmsg.delay("邮箱码是：112")\n')])])]),a("p",[e._v("运行消息生产者程序"),a("code",[e._v("python3 produce.py")]),e._v("上面消费者后台程序能看到被消费执行的log")]),e._v(" "),a("h3",{attrs:{id:"_2-3-取结果"}},[e._v("2.3 取结果")]),e._v(" "),a("p",[e._v("result.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('from celery.result import AsyncResult\nfrom tasks import app\n\nid = "f64598a2-46f1-4b57-9c94-f5a792dcaf48"\nasync_result = AsyncResult(id=id, app=app)\n\nif async_result.successful():\n    result = async_result.get()\n    print(result)\n')])])]),a("h2",{attrs:{id:"三-拓扑"}},[e._v("三. 拓扑")]),e._v(" "),a("p",[a("img",{attrs:{src:"/img/celery.png",alt:"celery"}})]),e._v(" "),a("h2",{attrs:{id:"四-多目录结构"}},[e._v("四. 多目录结构")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/testzcy/p/13227036.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("cnblogs 参考"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("./\n├── celery_tasks\n│   ├── celery.py\n│   ├── __init__.py\n│   ├── __pycache__\n│   ├── task01.py\n│   └── task02.py\n├── __pycache__\n├── readme.md\n├── start_server.sh\n└── venv\n    ├── produce_task.py\n    └── result.py\n")])])]),a("p",[e._v("celery.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import time,redis\nfrom celery import Celery\nbackend = 'redis://127.0.0.1/0'\nbroker = 'amqp://celery:celery123@localhost//'\n\napp = Celery('tasks', \n            broker=broker, \n            backend=backend,\n            include=['celery_tasks.task01',\n                    'celery_tasks.task02'\n                    ]\n            )\n\n# 时区\napp.conf.timezone = 'Asia/Shanghai'\n# 是否使用UTC\napp.conf.enable_utc = False\n")])])]),a("p",[e._v("task01.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import time\nfrom celery_tasks.celery import app\n\n@app.task\ndef sendmail(name):\n    print("start send email to %s" %(name))\n    time.sleep(1)\n    MSG = "邮件发送成功！"\n    print(MSG)\n    return MSG\n')])])]),a("p",[e._v("task02.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import time\nfrom celery_tasks.celery import app\n\n@app.task\ndef sendmsg(name):\n    print("start send msg to %s" %(name))\n    time.sleep(5)\n    MSG = "短信发送完成！"\n    print(MSG)\n    return MSG\n')])])]),a("p",[e._v("produce_task.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import sys\nsys.path.append("../")\nfrom celery_tasks.task01 import sendmail\nfrom celery_tasks.task02 import sendmsg\n\nresult = sendmail.delay("短信验证码是 123456 请勿告诉其他人。" )\nprint (result.id)\nresult = sendmsg.delay("邮箱码是：112")\nprint (result.id)\n')])])]),a("p",[e._v("result.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import sys\nsys.path.append("../")\nfrom celery.result import AsyncResult\nfrom celery_tasks.celery import app\n\nid = "330b3533-3ade-480b-b355-bf75fba64bf3"\nasync_result = AsyncResult(id=id, app=app)\n\nif async_result.successful():\n    result = async_result.get()\n    print(result)\n')])])])])}),[],!1,null,null,null);s.default=n.exports}}]);